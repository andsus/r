28 % 10
c(3,5,7)
list(Pling = 3, Plong = 5)
source('~/snap/exercism/5/exercism/r/raindrops/test_raindrops.R')
install.packages("devtools")
install.packages("devtools", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
library(testthat)
source("~/snap/exercism/5/exercism/r/raindrops/raindrops.R")
library(testthat)
context("raindrops")
test_that("the sound for 1 is 1", {
number <- 1
expect_equal(raindrops(number), "1")
})
test_that("the sound for 3 is Pling", {
number <- 3
expect_equal(raindrops(number), "Pling")
})
source("~/snap/exercism/5/exercism/r/raindrops/raindrops.R")
library(testthat)
context("raindrops")
test_that("the sound for 1 is 1", {
number <- 1
expect_equal(raindrops(number), "1")
})
source("~/snap/exercism/5/exercism/r/raindrops/raindrops.R")
library(testthat)
context("raindrops")
test_that("the sound for 1 is 1", {
number <- 1
expect_equal(raindrops(number), "1")
})
source("~/snap/exercism/5/exercism/r/raindrops/raindrops.R")
library(testthat)
context("raindrops")
test_that("the sound for 1 is 1", {
number <- 1
expect_equal(raindrops(number), "1")
})
test_that("the sound for 3 is Pling", {
number <- 3
expect_equal(raindrops(number), "Pling")
})
test_that("the sound for 5 is Plang", {
number <- 5
expect_equal(raindrops(number), "Plang")
})
test_that("the sound for 7 is Plong", {
number <- 7
expect_equal(raindrops(number), "Plong")
})
test_that("the sound for 6 is Pling as it has a factor 3", {
number <- 6
expect_equal(raindrops(number), "Pling")
})
test_that("2 to the power 3 does not make a raindrop sound as 3 is the exponent
not the base", {
number <- 8
expect_equal(raindrops(number), "8")
})
test_that("the sound for 9 is Pling as it has a factor 3", {
number <- 9
expect_equal(raindrops(number), "Pling")
})
test_that("the sound for 10 is Plang as it has a factor 5", {
number <- 10
expect_equal(raindrops(number), "Plang")
})
test_that("the sound for 14 is Plong as it has a factor of 7", {
number <- 14
expect_equal(raindrops(number), "Plong")
})
test_that("the sound for 15 is PlingPlang as it has factors 3 and 5", {
number <- 15
expect_equal(raindrops(number), "PlingPlang")
})
test_that("the sound for 21 is PlingPlong as it has factors 3 and 7", {
number <- 21
expect_equal(raindrops(number), "PlingPlong")
})
test_that("the sound for 25 is Plang as it has a factor 5", {
number <- 25
expect_equal(raindrops(number), "Plang")
})
test_that("the sound for 27 is Pling as it has a factor 3", {
number <- 27
expect_equal(raindrops(number), "Pling")
})
test_that("the sound for 35 is PlangPlong as it has factors 5 and 7", {
number <- 35
expect_equal(raindrops(number), "PlangPlong")
})
test_that("the sound for 49 is Plong as it has a factor 7", {
number <- 49
expect_equal(raindrops(number), "Plong")
})
test_that("the sound for 52 is 52", {
number <- 52
expect_equal(raindrops(number), "52")
})
test_that("the sound for 105 is PlingPlangPlong as it has factors 3, 5 and 7", {
number <- 105
expect_equal(raindrops(number), "PlingPlangPlong")
})
test_that("the sound for 3125 is Plang as it has a factor 5", {
number <- 3125
expect_equal(raindrops(number), "Plang")
})
message("All tests passed for exercise: raindrops")
source("~/snap/exercism/5/exercism/r/raindrops/raindrops.R")
library(testthat)
context("raindrops")
test_that("the sound for 1 is 1", {
number <- 1
expect_equal(raindrops(number), "1")
})
test_that("the sound for 3 is Pling", {
number <- 3
expect_equal(raindrops(number), "Pling")
})
test_that("the sound for 5 is Plang", {
number <- 5
expect_equal(raindrops(number), "Plang")
})
test_that("the sound for 7 is Plong", {
number <- 7
expect_equal(raindrops(number), "Plong")
})
test_that("the sound for 6 is Pling as it has a factor 3", {
number <- 6
expect_equal(raindrops(number), "Pling")
})
test_that("2 to the power 3 does not make a raindrop sound as 3 is the exponent
not the base", {
number <- 8
expect_equal(raindrops(number), "8")
})
test_that("the sound for 9 is Pling as it has a factor 3", {
number <- 9
expect_equal(raindrops(number), "Pling")
})
test_that("the sound for 10 is Plang as it has a factor 5", {
number <- 10
expect_equal(raindrops(number), "Plang")
})
test_that("the sound for 14 is Plong as it has a factor of 7", {
number <- 14
expect_equal(raindrops(number), "Plong")
})
test_that("the sound for 15 is PlingPlang as it has factors 3 and 5", {
number <- 15
expect_equal(raindrops(number), "PlingPlang")
})
test_that("the sound for 21 is PlingPlong as it has factors 3 and 7", {
number <- 21
expect_equal(raindrops(number), "PlingPlong")
})
test_that("the sound for 25 is Plang as it has a factor 5", {
number <- 25
expect_equal(raindrops(number), "Plang")
})
test_that("the sound for 27 is Pling as it has a factor 3", {
number <- 27
expect_equal(raindrops(number), "Pling")
})
test_that("the sound for 35 is PlangPlong as it has factors 5 and 7", {
number <- 35
expect_equal(raindrops(number), "PlangPlong")
})
test_that("the sound for 49 is Plong as it has a factor 7", {
number <- 49
expect_equal(raindrops(number), "Plong")
})
test_that("the sound for 52 is 52", {
number <- 52
expect_equal(raindrops(number), "52")
})
test_that("the sound for 105 is PlingPlangPlong as it has factors 3, 5 and 7", {
number <- 105
expect_equal(raindrops(number), "PlingPlangPlong")
})
test_that("the sound for 3125 is Plang as it has a factor 5", {
number <- 3125
expect_equal(raindrops(number), "Plang")
})
message("All tests passed for exercise: raindrops")
source("./hamming.R")
library(testthat)
help()
setwd("~/snap/exercism/5/exercism/r/raindrops")
setwd("~/snap/exercism/5/exercism/r/hamming")
source("./hamming.R")
library(testthat)
context("hamming")
test_that("identical strands", {
strand1 <- "A"
strand2 <- "A"
expect_equal(hamming(strand1, strand2), 0)
})
source("./hamming.R")
library(testthat)
context("hamming")
test_that("identical strands", {
strand1 <- "A"
strand2 <- "A"
expect_equal(hamming(strand1, strand2), 0)
})
test_that("long identical strands", {
strand1 <- "GGACTGA"
strand2 <- "GGACTGA"
expect_equal(hamming(strand1, strand2), 0)
})
test_that("complete distance in single nucleotide strands", {
strand1 <- "A"
strand2 <- "G"
expect_equal(hamming(strand1, strand2), 1)
})
test_that("complete distance in small strands", {
strand1 <- "AG"
strand2 <- "CT"
expect_equal(hamming(strand1, strand2), 2)
})
test_that("small distance in small strands", {
strand1 <- "AT"
strand2 <- "CT"
expect_equal(hamming(strand1, strand2), 1)
})
test_that("small distance", {
strand1 <- "GGACG"
strand2 <- "GGTCG"
expect_equal(hamming(strand1, strand2), 1)
})
test_that("small distance in long strands", {
strand1 <- "ACCAGGG"
strand2 <- "ACTATGG"
expect_equal(hamming(strand1, strand2), 2)
})
test_that("non-unique character in first strand", {
strand1 <- "AGA"
strand2 <- "AGG"
expect_equal(hamming(strand1, strand2), 1)
})
test_that("non-unique character in second strand", {
strand1 <- "AGG"
strand2 <- "AGA"
expect_equal(hamming(strand1, strand2), 1)
})
test_that("same nucleotides in different positions", {
strand1 <- "TAG"
strand2 <- "GAT"
expect_equal(hamming(strand1, strand2), 2)
})
test_that("large distance", {
strand1 <- "GATACA"
strand2 <- "GCATAA"
expect_equal(hamming(strand1, strand2), 4)
})
test_that("empty strands", {
strand1 <- ""
strand2 <- ""
expect_equal(hamming(strand1, strand2), 0)
})
test_that("disallow first strand longer", {
strand1 <- "AATG"
strand2 <- "AAA"
expect_error(hamming(strand1, strand2))
})
test_that("disallow second strand longer", {
strand1 <- "ATA"
strand2 <- "AGTG"
expect_error(hamming(strand1, strand2))
})
message("All tests passed for exercise: hamming")
splits <- strsplit(c(strand1, strand2), "")
strand1 <- "GATACA"
strand2 <- "GCATAA"
debugSource('~/snap/exercism/5/exercism/r/hamming/hamming.R')
debug(hamming)
hamming(strand1, strand2)
nchar(strand1)
c(strand1,strand2)
s <- c(strand1,strand2)
s[1]
s[[1]
]
traceback()
source("./hamming.R")
library(testthat)
context("hamming")
test_that("identical strands", {
strand1 <- "A"
strand2 <- "A"
expect_equal(hamming(strand1, strand2), 0)
})
test_that("long identical strands", {
strand1 <- "GGACTGA"
strand2 <- "GGACTGA"
expect_equal(hamming(strand1, strand2), 0)
})
test_that("complete distance in single nucleotide strands", {
strand1 <- "A"
strand2 <- "G"
expect_equal(hamming(strand1, strand2), 1)
})
test_that("complete distance in small strands", {
strand1 <- "AG"
strand2 <- "CT"
expect_equal(hamming(strand1, strand2), 2)
})
test_that("small distance in small strands", {
strand1 <- "AT"
strand2 <- "CT"
expect_equal(hamming(strand1, strand2), 1)
})
test_that("small distance", {
strand1 <- "GGACG"
strand2 <- "GGTCG"
expect_equal(hamming(strand1, strand2), 1)
})
test_that("small distance in long strands", {
strand1 <- "ACCAGGG"
strand2 <- "ACTATGG"
expect_equal(hamming(strand1, strand2), 2)
})
test_that("non-unique character in first strand", {
strand1 <- "AGA"
strand2 <- "AGG"
expect_equal(hamming(strand1, strand2), 1)
})
test_that("non-unique character in second strand", {
strand1 <- "AGG"
strand2 <- "AGA"
expect_equal(hamming(strand1, strand2), 1)
})
test_that("same nucleotides in different positions", {
strand1 <- "TAG"
strand2 <- "GAT"
expect_equal(hamming(strand1, strand2), 2)
})
test_that("large distance", {
strand1 <- "GATACA"
strand2 <- "GCATAA"
expect_equal(hamming(strand1, strand2), 4)
})
test_that("empty strands", {
strand1 <- ""
strand2 <- ""
expect_equal(hamming(strand1, strand2), 0)
})
test_that("disallow first strand longer", {
strand1 <- "AATG"
strand2 <- "AAA"
expect_error(hamming(strand1, strand2))
})
test_that("disallow second strand longer", {
strand1 <- "ATA"
strand2 <- "AGTG"
expect_error(hamming(strand1, strand2))
})
message("All tests passed for exercise: hamming")
source('~/snap/exercism/5/exercism/r/hamming/hamming.R')
